---
# This playbook performs the following operations
# * Root signin
# * Create new user
# ** If Debian8, install sudo
# * Root privileges: Add user to sudo group
# * Add Public Key Authentication
# ** Generate key pair
# ** Copy the public key
# * Disable Password Authentication
# * Test Log in
# * Setup a Basic firewall

- name: Ensure virgin linux system is prepared
  block:
  - name: Ensure groups admin and developer are added
    become: yes
    group:
      name: "{{ item }}"
      state: present
    with_items:
      - admin
      - developer

  - name: Ensure sudo group exists if debian
    become: yes
    gather_facts: true
    apt:
      name: sudo
      update_cache: yes
      state: present
    when: ansible_os_family == 'Debian'

  - name: Ensure mkpasswd (through whois) is installed to create password for new users
    become: yes
    apt:
      name: whois
      # update_cache: yes
      state: present
  
  - name: Ensure mkpasswd is installed
    command: which mkpasswd
    register: result

  - name: Ensure password is created
    command: mkpasswd --method=sha-512 password_user_101
    register: userpass

  - name: Ensure another user is created and added to sudo group
    become: yes
    user:
      name: "{{my_ssh_user.name}}"
      comment: "{{my_ssh_user.comment}}"
      # uid: "{{item.uid}}"
      groups: admin, developer, sudo
      create_home: yes
      ## run command 'mkpasswd --method=sha-512' to create your own encrypted password ##
      password: "{{userpass.stdout}}"
      state: present
    tags:
      - debug

  - name: Fetch the userpasswords
    debug:
      msg: "Default passwords for new users: {{userpass.stdout}}"

  - name: Debug pub key location of ssh_users list
    debug:
      msg: "Here is where user pub is: {{lookup('env','HOME')}}/.ssh/{{my_ssh_user.name}}.pub"
    tags: 
      - debug
    verbosity: 3
 
  - name: Debug command
    debug:
      msg: "ssh-keygen -t rsa -f {{lookup('env','HOME')}}/.ssh/{{my_ssh_user.name}}.pub"
    verbosity: 3

  - name: Check if ssh_key already exists
    become: yes
    stat:
      path: "{{lookup('env','HOME')}}/.ssh/{{my_ssh_user.name}}.pub"
    register: local_ssh_key_location

  - name: Ensure new ssh RSA host key is generated locally
    become: yes
    command: "ssh-keygen -t rsa -f {{lookup('env','HOME')}}/.ssh/{{my_ssh_user.name}}.pub -C '' -N ''"
    args: 
      creates:"{{lookup('env','HOME')}}/.ssh/{{my_ssh_user.name}}.pub"
    when: local_ssh_key_location.stat.exists == false

  - name: Set authorized key for new user copying from current user
    authorized_key:
      user: "{{my_ssh_user.name}}"
      state: present
      manage_dir: true
      key: "{{lookup('file', lookup('env','HOME') ~ '/.ssh/' ~ my_ssh_user.name ~ '.pub')}}"
    tags:
      - key 

  # - name: Install UFW
  #   become: "{{remote_controller_user}}"
  #   package:
  #     name: ufw
  #     state: reset

  # - name: Ensure public key authentication is added
  #   become: yes
  #   - local_action:
